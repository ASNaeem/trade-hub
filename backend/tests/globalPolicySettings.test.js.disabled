const { app, startServer, stopServer } = require("../server");
const mongoose = require("mongoose");
const GlobalPolicySettings = require("../models/globalPolicySettingsSchema");
const Admin = require("../models/adminSchema");
const request = require("supertest");

describe("Global Policy Settings API Tests", () => {
  let server;
  let adminToken;
  let adminId;

  const testAdmin = {
    name: "Test Admin",
    email: "admin@test.com",
    password: "password123",
    phone: "+1234567890",
    role: "admin",
  };

  const testPolicy = {
    policyName: "MaxListingPrice",
    value: 10000,
    description: "Maximum price allowed for a single item listing",
  };

  beforeAll(async () => {
    server = await startServer();

    // Create and login admin
    const admin = new Admin(testAdmin);
    const savedAdmin = await admin.save();
    adminId = savedAdmin._id;

    const loginRes = await request(app)
      .post("/api/admin/login")
      .send({ email: testAdmin.email, password: testAdmin.password });
    adminToken = loginRes.body.token;
  });

  afterAll(async () => {
    await GlobalPolicySettings.deleteMany({});
    await Admin.deleteMany({});
    await stopServer();
  });

  test("Create new policy (admin only)", async () => {
    const res = await request(app)
      .post("/api/policies")
      .set("Authorization", `Bearer ${adminToken}`)
      .send(testPolicy);

    expect(res.statusCode).toBe(201);
    expect(res.body).toHaveProperty("id");
    expect(res.body.policyName).toBe(testPolicy.policyName);
    expect(res.body.value).toBe(testPolicy.value);
  });

  test("Get all policies", async () => {
    const res = await request(app).get("/api/policies");

    expect(res.statusCode).toBe(200);
    expect(Array.isArray(res.body)).toBeTruthy();
  });

  test("Get policy by name", async () => {
    const res = await request(app).get(
      `/api/policies/${testPolicy.policyName}`
    );

    expect(res.statusCode).toBe(200);
    expect(res.body.policyName).toBe(testPolicy.policyName);
  });

  test("Update policy (admin only)", async () => {
    // First create a policy
    const createRes = await request(app)
      .post("/api/policies")
      .set("Authorization", `Bearer ${adminToken}`)
      .send(testPolicy);

    const res = await request(app)
      .put(`/api/policies/${createRes.body.id}`)
      .set("Authorization", `Bearer ${adminToken}`)
      .send({ value: 15000 });

    expect(res.statusCode).toBe(200);
    expect(res.body.value).toBe(15000);
  });

  test("Fail to create policy without admin auth", async () => {
    const res = await request(app).post("/api/policies").send(testPolicy);

    expect(res.statusCode).toBe(401);
  });
});
