const { app, startServer, stopServer } = require("../server");
const mongoose = require("mongoose");
const Admin = require("../models/adminSchema");
const request = require("supertest");

describe("Admin API Tests", () => {
  let server;
  let superAdminToken;

  const testSuperAdmin = {
    name: "Super Admin",
    email: "superadmin@test.com",
    password: "password123",
    role: "superadmin",
  };

  const testAdmin = {
    name: "Regular Admin",
    email: "admin@test.com",
    password: "password123",
    role: "admin",
  };

  beforeAll(async () => {
    server = await startServer();

    // Create a super admin first
    const superAdmin = new Admin(testSuperAdmin);
    await superAdmin.save();

    // Login as super admin
    const loginRes = await request(app).post("/api/admin/login").send({
      email: testSuperAdmin.email,
      password: testSuperAdmin.password,
    });
    superAdminToken = loginRes.body.token;
  });

  afterAll(async () => {
    await Admin.deleteMany({});
    await stopServer();
  });

  test("Create new admin (by super admin)", async () => {
    const res = await request(app)
      .post("/api/admin/register")
      .set("Authorization", `Bearer ${superAdminToken}`)
      .send(testAdmin);

    expect(res.statusCode).toBe(201);
    expect(res.body.admin).toHaveProperty("id");
    expect(res.body.admin.name).toBe(testAdmin.name);
    expect(res.body.admin).not.toHaveProperty("phone");
  });

  test("Admin login", async () => {
    const res = await request(app).post("/api/admin/login").send({
      email: testAdmin.email,
      password: testAdmin.password,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty("token");
    expect(res.body.admin).not.toHaveProperty("phone");
  });

  test("Get admin profile", async () => {
    const loginRes = await request(app).post("/api/admin/login").send({
      email: testAdmin.email,
      password: testAdmin.password,
    });

    const res = await request(app)
      .get("/api/admin/profile")
      .set("Authorization", `Bearer ${loginRes.body.token}`);

    expect(res.statusCode).toBe(200);
    expect(res.body.email).toBe(testAdmin.email);
  });

  test("Update admin profile", async () => {
    const loginRes = await request(app).post("/api/admin/login").send({
      email: testAdmin.email,
      password: testAdmin.password,
    });

    const res = await request(app)
      .put("/api/admin/profile")
      .set("Authorization", `Bearer ${loginRes.body.token}`)
      .send({
        name: "Updated Admin Name",
      });

    expect(res.statusCode).toBe(200);
    expect(res.body.admin.name).toBe("Updated Admin Name");
  });
});
